name: ü§ñ MCP Code Analysis & Documentation

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  MCP_SERVICE_URL: ${{ secrets.MCP_SERVICE_URL }}
  NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
  NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  mcp-analysis:
    runs-on: ubuntu-latest
    name: üîç Code Analysis & Doc Generation
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # ÈúÄË¶ÅÂÆåÊï¥Ê≠∑Âè≤‰æÜÁîüÊàê diff
    
    - name: üîç Generate Git Diff
      id: git-diff
      run: |
        # Áç≤ÂèñËàá main branch ÁöÑÂ∑ÆÁï∞
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          BRANCH_NAME="${{ github.head_ref }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
        else
          # ËôïÁêÜÊñ∞ÂàÜÊîØÊé®ÈÄÅÁöÑÊÉÖÊ≥Å
          BEFORE_SHA="${{ github.event.before }}"
          if [ "$BEFORE_SHA" = "0000000000000000000000000000000000000000" ] || [ -z "$BEFORE_SHA" ]; then
            # Êñ∞ÂàÜÊîØÔºåËàá main ÊØîËºÉ
            BASE_SHA="origin/main"
          else
            BASE_SHA="$BEFORE_SHA"
          fi
          HEAD_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.ref_name }}"
          PR_NUMBER=""
        fi
        
        echo "base-sha=${BASE_SHA}" >> $GITHUB_OUTPUT
        echo "head-sha=${HEAD_SHA}" >> $GITHUB_OUTPUT
        echo "branch-name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "pr-number=${PR_NUMBER}" >> $GITHUB_OUTPUT
        
        # ÁîüÊàê diff (ÈôêÂà∂Â§ßÂ∞èÈÅøÂÖç API Ë∂ÖÈôê)
        if [ "$BASE_SHA" = "origin/main" ]; then
          # Êñ∞ÂàÜÊîØÊÉÖÊ≥ÅÔºöÊØîËºÉÁï∂ÂâçÂàÜÊîØËàá main
          git diff origin/main...HEAD --unified=3 > /tmp/changes.diff || git diff HEAD~1 --unified=3 > /tmp/changes.diff
        else
          # Ê≠£Â∏∏ÊÉÖÊ≥ÅÔºöÊØîËºÉÂÖ©ÂÄãÊèê‰∫§
          git diff ${BASE_SHA}...${HEAD_SHA} --unified=3 > /tmp/changes.diff || git diff HEAD~1 --unified=3 > /tmp/changes.diff
        fi
        
        # Ê™¢Êü• diff Â§ßÂ∞è‰∏¶Êà™Êñ∑Â¶ÇÊûúÂ§™Â§ß
        if [ $(wc -c < /tmp/changes.diff) -gt 50000 ]; then
          head -c 45000 /tmp/changes.diff > /tmp/changes_truncated.diff
          echo "... [TRUNCATED - DIFF TOO LARGE]" >> /tmp/changes_truncated.diff
          mv /tmp/changes_truncated.diff /tmp/changes.diff
        fi
        
        # diff ÂÖßÂÆπÂ∑≤‰øùÂ≠òÂú® /tmp/changes.diff ‰∏≠ÔºåÁÑ°ÈúÄÁí∞Â¢ÉËÆäÊï∏
        
        # Áç≤ÂèñËÆäÊõ¥Áµ±Ë®à
        if [ "$BASE_SHA" = "origin/main" ]; then
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | wc -l || git diff --name-only HEAD~1 | wc -l)
          INSERTIONS=$(git diff --shortstat origin/main...HEAD | grep -oE '[0-9]+ insertions?' | grep -oE '[0-9]+' || git diff --shortstat HEAD~1 | grep -oE '[0-9]+ insertions?' | grep -oE '[0-9]+' || echo "0")
          DELETIONS=$(git diff --shortstat origin/main...HEAD | grep -oE '[0-9]+ deletions?' | grep -oE '[0-9]+' || git diff --shortstat HEAD~1 | grep -oE '[0-9]+ deletions?' | grep -oE '[0-9]+' || echo "0")
        else
          CHANGED_FILES=$(git diff --name-only ${BASE_SHA}...${HEAD_SHA} | wc -l || git diff --name-only HEAD~1 | wc -l)
          INSERTIONS=$(git diff --shortstat ${BASE_SHA}...${HEAD_SHA} | grep -oE '[0-9]+ insertions?' | grep -oE '[0-9]+' || git diff --shortstat HEAD~1 | grep -oE '[0-9]+ insertions?' | grep -oE '[0-9]+' || echo "0")
          DELETIONS=$(git diff --shortstat ${BASE_SHA}...${HEAD_SHA} | grep -oE '[0-9]+ deletions?' | grep -oE '[0-9]+' || git diff --shortstat HEAD~1 | grep -oE '[0-9]+ deletions?' | grep -oE '[0-9]+' || echo "0")
        fi
        
        echo "changed-files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
        echo "insertions=${INSERTIONS}" >> $GITHUB_OUTPUT
        echo "deletions=${DELETIONS}" >> $GITHUB_OUTPUT

    - name: ü§ñ AI Code Analysis
      id: ai-analysis
      if: steps.git-diff.outputs.changed-files != '0'
      run: |
        # ÂÆâË£ù jq Â¶ÇÊûúÈúÄË¶Å
        if ! command -v jq &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq
        fi
        
        # Ê∫ñÂÇôÂàÜÊûêË´ãÊ±Ç - ‰ΩøÁî® jq ‰æÜÂÆâÂÖ®ËôïÁêÜ JSON
        cat > /tmp/analysis_payload.json << 'EOF'
        {
          "diff": "",
          "metadata": {
            "repository": "",
            "branch": "",
            "commit": "",
            "pr_number": "",
            "author": "",
            "changed_files": 0,
            "insertions": 0,
            "deletions": 0,
            "event_type": ""
          }
        }
        EOF
        
        # ‰ΩøÁî® jq ÂÆâÂÖ®Âú∞ÊèíÂÖ•ËÆäÊï∏ÂÄº - ÂæûÊñá‰ª∂ËÆÄÂèñ diff ÈÅøÂÖçÂëΩ‰ª§Ë°åÈï∑Â∫¶ÈôêÂà∂
        cat /tmp/changes.diff | jq -Rs --arg repo "${{ github.repository }}" \
           --arg branch "${{ steps.git-diff.outputs.branch-name }}" \
           --arg commit "${{ steps.git-diff.outputs.head-sha }}" \
           --arg pr_number "${{ steps.git-diff.outputs.pr-number }}" \
           --arg author "${{ github.actor }}" \
           --argjson changed_files "${{ steps.git-diff.outputs.changed-files }}" \
           --argjson insertions "${{ steps.git-diff.outputs.insertions }}" \
           --argjson deletions "${{ steps.git-diff.outputs.deletions }}" \
           --arg event_type "${{ github.event_name }}" \
           '{
              "diff": .,
              "metadata": {
                "repository": $repo,
                "branch": $branch,
                "commit": $commit,
                "pr_number": $pr_number,
                "author": $author,
                "changed_files": $changed_files,
                "insertions": $insertions,
                "deletions": $deletions,
                "event_type": $event_type
              }
            }' > /tmp/analysis_request.json
        
        # Ë™øÁî® MCP ÂàÜÊûê API
        ANALYSIS_RESULT=$(curl -s -X POST "${MCP_SERVICE_URL}/api/ci-cd/analyze" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.MCP_API_TOKEN }}" \
          -d @/tmp/analysis_request.json || echo '{"error": "API call failed"}')
        
        echo "analysis-result=${ANALYSIS_RESULT}" >> $GITHUB_OUTPUT
        
        # ÂÑ≤Â≠òÂàÜÊûêÁµêÊûúÂà∞Ê™îÊ°à
        echo "${ANALYSIS_RESULT}" > /tmp/analysis_result.json

    - name: üìù Generate Documentation Patch
      id: doc-generation
      if: steps.ai-analysis.outputs.analysis-result != ''
      run: |
        # ÁîüÊàêÊñáÊ™îË£ú‰∏Å - ‰ΩøÁî® jq ÂÆâÂÖ®ËôïÁêÜ JSON
        cat > /tmp/doc_template.json << 'EOF'
        {
          "diff": "",
          "analysis_result": {},
          "version": "",
          "metadata": {
            "repository": "",
            "commit": ""
          }
        }
        EOF
        
        # ËÆÄÂèñÂàÜÊûêÁµêÊûú
        ANALYSIS_JSON=$(cat /tmp/analysis_result.json 2>/dev/null || echo '{}')
        
        # ‰ΩøÁî® jq ÂÆâÂÖ®Âú∞ÊßãÂª∫Ë´ãÊ±Ç - ÂæûÊñá‰ª∂ËÆÄÂèñ diff
        cat /tmp/changes.diff | jq -Rs --argjson analysis "$ANALYSIS_JSON" \
           --arg version "${{ github.ref_name }}-${{ github.run_number }}" \
           --arg repo "${{ github.repository }}" \
           --arg commit "${{ steps.git-diff.outputs.head-sha }}" \
           '{
              "diff": .,
              "analysis_result": $analysis,
              "version": $version,
              "metadata": {
                "repository": $repo,
                "commit": $commit
              }
            }' > /tmp/doc_request.json
        
        DOC_PATCH=$(curl -s -X POST "${MCP_SERVICE_URL}/api/ci-cd/generate-docs" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.MCP_API_TOKEN }}" \
          -d @/tmp/doc_request.json || echo '{"error": "Doc generation failed"}')
        
        echo "doc-patch=${DOC_PATCH}" >> $GITHUB_OUTPUT

    - name: üìã Create Notion Release Page
      id: notion-page
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        VERSION_TAG="${{ github.ref_name }}-v${{ github.run_number }}"
        RELEASE_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        # ‰ΩøÁî® jq ÂÆâÂÖ®Âú∞ÊßãÂª∫ Notion Ë´ãÊ±Ç
        cat > /tmp/notion_template.json << 'EOF'
        {
          "version": "",
          "release_date": "",
          "repository": "",
          "commit": "",
          "author": "",
          "branch": "",
          "analysis": {},
          "documentation": "",
          "stats": {
            "changed_files": 0,
            "insertions": 0,
            "deletions": 0
          }
        }
        EOF
        
        # ËÆÄÂèñÂàÜÊûêÁµêÊûúÂíåÊñáÊ™îË£ú‰∏Å
        ANALYSIS_JSON=$(cat /tmp/analysis_result.json 2>/dev/null || echo '{}')
        DOC_PATCH="${{ steps.doc-generation.outputs.doc-patch }}"
        
        jq --arg version "$VERSION_TAG" \
           --arg date "$RELEASE_DATE" \
           --arg repo "${{ github.repository }}" \
           --arg commit "${{ steps.git-diff.outputs.head-sha }}" \
           --arg author "${{ github.actor }}" \
           --arg branch "${{ steps.git-diff.outputs.branch-name }}" \
           --argjson analysis "$ANALYSIS_JSON" \
           --arg docs "$DOC_PATCH" \
           --argjson changed_files "${{ steps.git-diff.outputs.changed-files }}" \
           --argjson insertions "${{ steps.git-diff.outputs.insertions }}" \
           --argjson deletions "${{ steps.git-diff.outputs.deletions }}" \
           '.version = $version |
            .release_date = $date |
            .repository = $repo |
            .commit = $commit |
            .author = $author |
            .branch = $branch |
            .analysis = $analysis |
            .documentation = $docs |
            .stats.changed_files = $changed_files |
            .stats.insertions = $insertions |
            .stats.deletions = $deletions' \
           /tmp/notion_template.json > /tmp/notion_request.json
        
        NOTION_RESULT=$(curl -s -X POST "${MCP_SERVICE_URL}/api/ci-cd/create-release-page" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.MCP_API_TOKEN }}" \
          -d @/tmp/notion_request.json || echo '{"error": "Notion API failed"}')
        
        echo "notion-result=${NOTION_RESULT}" >> $GITHUB_OUTPUT
        
        # ÊèêÂèñ Notion È†ÅÈù¢ URL
        NOTION_URL=$(echo "${NOTION_RESULT}" | jq -r '.page_url // "N/A"')
        echo "notion-url=${NOTION_URL}" >> $GITHUB_OUTPUT

    - name: üì¢ Slack Release Notification
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
        VERSION_TAG="${{ github.ref_name }}-v${{ github.run_number }}"
        COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
        
        # ‰ΩøÁî® jq ÂÆâÂÖ®Âú∞ÊßãÂª∫ Slack Ë®äÊÅØ
        cat > /tmp/slack_template.json << 'EOF'
        {
          "text": "",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "üßÆ Calculator App - New Release"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Repository:*\n"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Version:*\n"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Author:*\n"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Branch:*\n"
                }
              ]
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Commit Message:*\n"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Files Changed:* 0"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Insertions:* +0"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Deletions:* -0"
                }
              ]
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "üìã View Release Notes"
                  },
                  "url": ""
                },
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "üíª View Commit"
                  },
                  "url": ""
                }
              ]
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": "ü§ñ Automated by MCP CI/CD Pipeline | üßÆ Calculator Demo Project"
                }
              ]
            }
          ]
        }
        EOF
        
        jq --arg text "üßÆ Calculator App Release: $VERSION_TAG" \
           --arg repo "${{ github.repository }}" \
           --arg version "$VERSION_TAG" \
           --arg author "${{ github.actor }}" \
           --arg branch "${{ steps.git-diff.outputs.branch-name }}" \
           --arg commit_msg "$COMMIT_MESSAGE" \
           --arg files "${{ steps.git-diff.outputs.changed-files }}" \
           --arg insertions "${{ steps.git-diff.outputs.insertions }}" \
           --arg deletions "${{ steps.git-diff.outputs.deletions }}" \
           --arg notion_url "${{ steps.notion-page.outputs.notion-url }}" \
           --arg commit_url "$COMMIT_URL" \
           '.text = $text |
            .blocks[1].fields[0].text = "*Repository:*\n" + $repo |
            .blocks[1].fields[1].text = "*Version:*\n" + $version |
            .blocks[1].fields[2].text = "*Author:*\n" + $author |
            .blocks[1].fields[3].text = "*Branch:*\n" + $branch |
            .blocks[2].text.text = "*Commit Message:*\n" + $commit_msg |
            .blocks[3].fields[0].text = "*Files Changed:* " + $files |
            .blocks[3].fields[1].text = "*Insertions:* +" + $insertions |
            .blocks[3].fields[2].text = "*Deletions:* -" + $deletions |
            .blocks[4].elements[0].url = $notion_url |
            .blocks[4].elements[1].url = $commit_url' \
           /tmp/slack_template.json > /tmp/slack_payload.json
        
        # ÁôºÈÄÅ Slack ÈÄöÁü•
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d @/tmp/slack_payload.json

    - name: üìù PR Comment (for Pull Requests)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const analysisResult = ${{ steps.ai-analysis.outputs.analysis-result }};
          
          const comment = `
          ## üßÆ Calculator App - AI Code Analysis Report
          
          **Analysis Summary:**
          - **Files Changed:** ${{ steps.git-diff.outputs.changed-files }}
          - **Lines Added:** +${{ steps.git-diff.outputs.insertions }}
          - **Lines Deleted:** -${{ steps.git-diff.outputs.deletions }}
          
          **AI Insights:**
          ${analysisResult?.summary || 'Analysis completed successfully'}
          
          **Recommendations:**
          ${analysisResult?.recommendations || 'Please review the changes carefully'}
          
          ---
          *ü§ñ Generated by MCP AI Analysis Pipeline for Calculator Demo*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: üéØ Summary
      if: always()
      run: |
        echo "## üßÆ Calculator CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ steps.git-diff.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ steps.git-diff.outputs.head-sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Changed Files:** ${{ steps.git-diff.outputs.changed-files }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Lines Changed:** +${{ steps.git-diff.outputs.insertions }}/-${{ steps.git-diff.outputs.deletions }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "- **Notion Page:** ${{ steps.notion-page.outputs.notion-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Slack Notification:** ‚úÖ Sent" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ **MCP Calculator Analysis Pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY