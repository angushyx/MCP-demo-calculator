name: 🤖 MCP Code Analysis & Documentation

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  MCP_SERVICE_URL: ${{ secrets.MCP_SERVICE_URL }}
  NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
  NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  mcp-analysis:
    runs-on: ubuntu-latest
    name: 🔍 Code Analysis & Doc Generation
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 需要完整歷史來生成 diff
    
    - name: 🔍 Generate Git Diff
      id: git-diff
      run: |
        # 獲取與 main branch 的差異
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          BRANCH_NAME="${{ github.head_ref }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
        else
          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.ref_name }}"
          PR_NUMBER=""
        fi
        
        echo "base-sha=${BASE_SHA}" >> $GITHUB_OUTPUT
        echo "head-sha=${HEAD_SHA}" >> $GITHUB_OUTPUT
        echo "branch-name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "pr-number=${PR_NUMBER}" >> $GITHUB_OUTPUT
        
        # 生成 diff (限制大小避免 API 超限)
        git diff ${BASE_SHA}...${HEAD_SHA} --unified=3 > /tmp/changes.diff
        
        # 檢查 diff 大小並截斷如果太大
        if [ $(wc -c < /tmp/changes.diff) -gt 50000 ]; then
          head -c 45000 /tmp/changes.diff > /tmp/changes_truncated.diff
          echo "... [TRUNCATED - DIFF TOO LARGE]" >> /tmp/changes_truncated.diff
          mv /tmp/changes_truncated.diff /tmp/changes.diff
        fi
        
        # 將 diff 內容存為環境變數 (處理多行)
        {
          echo 'DIFF_CONTENT<<EOF'
          cat /tmp/changes.diff
          echo EOF
        } >> $GITHUB_ENV
        
        # 獲取變更統計
        CHANGED_FILES=$(git diff --name-only ${BASE_SHA}...${HEAD_SHA} | wc -l)
        INSERTIONS=$(git diff --shortstat ${BASE_SHA}...${HEAD_SHA} | grep -oE '[0-9]+ insertions?' | grep -oE '[0-9]+' || echo "0")
        DELETIONS=$(git diff --shortstat ${BASE_SHA}...${HEAD_SHA} | grep -oE '[0-9]+ deletions?' | grep -oE '[0-9]+' || echo "0")
        
        echo "changed-files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
        echo "insertions=${INSERTIONS}" >> $GITHUB_OUTPUT
        echo "deletions=${DELETIONS}" >> $GITHUB_OUTPUT

    - name: 🤖 AI Code Analysis
      id: ai-analysis
      if: env.DIFF_CONTENT != ''
      run: |
        # 準備分析請求
        ANALYSIS_PAYLOAD=$(cat << 'EOF'
        {
          "diff": "${{ env.DIFF_CONTENT }}",
          "metadata": {
            "repository": "${{ github.repository }}",
            "branch": "${{ steps.git-diff.outputs.branch-name }}",
            "commit": "${{ steps.git-diff.outputs.head-sha }}",
            "pr_number": "${{ steps.git-diff.outputs.pr-number }}",
            "author": "${{ github.actor }}",
            "changed_files": ${{ steps.git-diff.outputs.changed-files }},
            "insertions": ${{ steps.git-diff.outputs.insertions }},
            "deletions": ${{ steps.git-diff.outputs.deletions }},
            "event_type": "${{ github.event_name }}"
          }
        }
        EOF
        )
        
        # 調用 MCP 分析 API
        ANALYSIS_RESULT=$(curl -s -X POST "${MCP_SERVICE_URL}/api/ci-cd/analyze" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.MCP_API_TOKEN }}" \
          -d "$ANALYSIS_PAYLOAD" || echo '{"error": "API call failed"}')
        
        echo "analysis-result=${ANALYSIS_RESULT}" >> $GITHUB_OUTPUT
        
        # 儲存分析結果到檔案
        echo "${ANALYSIS_RESULT}" > /tmp/analysis_result.json

    - name: 📝 Generate Documentation Patch
      id: doc-generation
      if: steps.ai-analysis.outputs.analysis-result != ''
      run: |
        # 生成文檔補丁
        DOC_PAYLOAD=$(cat << 'EOF'
        {
          "diff": "${{ env.DIFF_CONTENT }}",
          "analysis_result": ${{ steps.ai-analysis.outputs.analysis-result }},
          "version": "${{ github.ref_name }}-${{ github.run_number }}",
          "metadata": {
            "repository": "${{ github.repository }}",
            "commit": "${{ steps.git-diff.outputs.head-sha }}"
          }
        }
        EOF
        )
        
        DOC_PATCH=$(curl -s -X POST "${MCP_SERVICE_URL}/api/ci-cd/generate-docs" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.MCP_API_TOKEN }}" \
          -d "$DOC_PAYLOAD")
        
        echo "doc-patch=${DOC_PATCH}" >> $GITHUB_OUTPUT

    - name: 📋 Create Notion Release Page
      id: notion-page
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        VERSION_TAG="${{ github.ref_name }}-v${{ github.run_number }}"
        RELEASE_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        NOTION_PAYLOAD=$(cat << EOF
        {
          "version": "${VERSION_TAG}",
          "release_date": "${RELEASE_DATE}",
          "repository": "${{ github.repository }}",
          "commit": "${{ steps.git-diff.outputs.head-sha }}",
          "author": "${{ github.actor }}",
          "branch": "${{ steps.git-diff.outputs.branch-name }}",
          "analysis": ${{ steps.ai-analysis.outputs.analysis-result }},
          "documentation": "${{ steps.doc-generation.outputs.doc-patch }}",
          "stats": {
            "changed_files": ${{ steps.git-diff.outputs.changed-files }},
            "insertions": ${{ steps.git-diff.outputs.insertions }},
            "deletions": ${{ steps.git-diff.outputs.deletions }}
          }
        }
        EOF
        )
        
        NOTION_RESULT=$(curl -s -X POST "${MCP_SERVICE_URL}/api/ci-cd/create-release-page" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.MCP_API_TOKEN }}" \
          -d "$NOTION_PAYLOAD")
        
        echo "notion-result=${NOTION_RESULT}" >> $GITHUB_OUTPUT
        
        # 提取 Notion 頁面 URL
        NOTION_URL=$(echo "${NOTION_RESULT}" | jq -r '.page_url // "N/A"')
        echo "notion-url=${NOTION_URL}" >> $GITHUB_OUTPUT

    - name: 📢 Slack Release Notification
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
        VERSION_TAG="${{ github.ref_name }}-v${{ github.run_number }}"
        
        # 準備 Slack 訊息
        SLACK_PAYLOAD=$(cat << EOF
        {
          "text": "🧮 Calculator App Release: ${VERSION_TAG}",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "🧮 Calculator App - New Release"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Repository:*\n${{ github.repository }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Version:*\n${VERSION_TAG}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Author:*\n${{ github.actor }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Branch:*\n${{ steps.git-diff.outputs.branch-name }}"
                }
              ]
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Commit Message:*\n${COMMIT_MESSAGE}"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Files Changed:* ${{ steps.git-diff.outputs.changed-files }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Insertions:* +${{ steps.git-diff.outputs.insertions }}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Deletions:* -${{ steps.git-diff.outputs.deletions }}"
                }
              ]
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "📋 View Release Notes"
                  },
                  "url": "${{ steps.notion-page.outputs.notion-url }}"
                },
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "💻 View Commit"
                  },
                  "url": "${{ github.event.head_commit.url }}"
                }
              ]
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": "🤖 Automated by MCP CI/CD Pipeline | 🧮 Calculator Demo Project"
                }
              ]
            }
          ]
        }
        EOF
        )
        
        # 發送 Slack 通知
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d "$SLACK_PAYLOAD"

    - name: 📝 PR Comment (for Pull Requests)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const analysisResult = ${{ steps.ai-analysis.outputs.analysis-result }};
          
          const comment = `
          ## 🧮 Calculator App - AI Code Analysis Report
          
          **Analysis Summary:**
          - **Files Changed:** ${{ steps.git-diff.outputs.changed-files }}
          - **Lines Added:** +${{ steps.git-diff.outputs.insertions }}
          - **Lines Deleted:** -${{ steps.git-diff.outputs.deletions }}
          
          **AI Insights:**
          ${analysisResult?.summary || 'Analysis completed successfully'}
          
          **Recommendations:**
          ${analysisResult?.recommendations || 'Please review the changes carefully'}
          
          ---
          *🤖 Generated by MCP AI Analysis Pipeline for Calculator Demo*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: 🎯 Summary
      if: always()
      run: |
        echo "## 🧮 Calculator CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ steps.git-diff.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ steps.git-diff.outputs.head-sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Changed Files:** ${{ steps.git-diff.outputs.changed-files }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Lines Changed:** +${{ steps.git-diff.outputs.insertions }}/-${{ steps.git-diff.outputs.deletions }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "- **Notion Page:** ${{ steps.notion-page.outputs.notion-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Slack Notification:** ✅ Sent" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **MCP Calculator Analysis Pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY