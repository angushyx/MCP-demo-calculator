name: 🚀 Modern MCP Calculator Pipeline

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main, develop]

env:
  MCP_SERVICE_URL: ${{ secrets.MCP_SERVICE_URL || 'http://localhost:3001' }}
  NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  analyze:
    name: 🔍 Code Analysis & Auto Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📊 Get Changes
      id: changes
      run: |
        # 使用 GitHub API 獲取變更信息，更可靠
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
        else
          # 對於 push 事件，比較與 main 的差異
          BASE="origin/main"
          HEAD="${{ github.sha }}"
        fi
        
        # 生成變更摘要
        git diff --name-only $BASE...$HEAD > changed_files.txt
        git diff --stat $BASE...$HEAD > diff_stats.txt
        
        # 提取統計信息
        CHANGED_FILES=$(wc -l < changed_files.txt)
        STATS=$(git diff --shortstat $BASE...$HEAD)
        INSERTIONS=$(echo "$STATS" | grep -o '[0-9]\+ insertions\?' | grep -o '[0-9]\+' || echo "0")
        DELETIONS=$(echo "$STATS" | grep -o '[0-9]\+ deletions\?' | grep -o '[0-9]\+' || echo "0")
        
        # 設置輸出
        echo "changed-files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "insertions=$INSERTIONS" >> $GITHUB_OUTPUT  
        echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT
        echo "base-ref=$BASE" >> $GITHUB_OUTPUT
        echo "head-ref=$HEAD" >> $GITHUB_OUTPUT

    - name: 🤖 MCP Analysis
      id: mcp-analysis
      if: steps.changes.outputs.changed-files != '0'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          try {
            // 生成 diff
            const diffOutput = execSync(`git diff ${{ steps.changes.outputs.base-ref }}...${{ steps.changes.outputs.head-ref }}`, 
              { encoding: 'utf8', maxBuffer: 1024 * 1024 });
            
            // 準備分析數據
            const analysisData = {
              diff: diffOutput.slice(0, 50000), // 限制大小
              metadata: {
                repository: context.repo.owner + '/' + context.repo.repo,
                branch: '${{ github.ref_name }}',
                commit: '${{ github.sha }}',
                author: '${{ github.actor }}',
                changed_files: parseInt('${{ steps.changes.outputs.changed-files }}'),
                insertions: parseInt('${{ steps.changes.outputs.insertions }}'),
                deletions: parseInt('${{ steps.changes.outputs.deletions }}'),
                event_type: '${{ github.event_name }}'
              }
            };
            
            console.log('📊 Analysis data prepared:', {
              diffSize: analysisData.diff.length,
              changedFiles: analysisData.metadata.changed_files
            });
            
            // 調用 MCP 服務 (如果可用)
            if (process.env.MCP_SERVICE_URL && !process.env.MCP_SERVICE_URL.includes('localhost')) {
              const response = await fetch(`${process.env.MCP_SERVICE_URL}/api/ci-cd/analyze`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${{ secrets.MCP_API_TOKEN }}`
                },
                body: JSON.stringify(analysisData)
              });
              
              if (response.ok) {
                const result = await response.json();
                console.log('✅ MCP Analysis successful:', result.summary || 'Analysis completed');
                
                // 保存結果供後續步驟使用
                fs.writeFileSync('analysis_result.json', JSON.stringify(result, null, 2));
                core.setOutput('analysis-success', 'true');
                core.setOutput('analysis-summary', result.summary || 'Analysis completed');
              } else {
                console.log('⚠️ MCP Analysis failed, continuing without AI insights');
                core.setOutput('analysis-success', 'false');
              }
            } else {
              console.log('🏠 Local development - skipping MCP API call');
              core.setOutput('analysis-success', 'mock');
            }
            
          } catch (error) {
            console.error('❌ Analysis error:', error.message);
            core.setOutput('analysis-success', 'false');
          }

    - name: 📝 Create Release Notes
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // 讀取分析結果
          let analysisResult = { summary: 'No analysis available' };
          try {
            if (fs.existsSync('analysis_result.json')) {
              analysisResult = JSON.parse(fs.readFileSync('analysis_result.json', 'utf8'));
            }
          } catch (e) {
            console.log('No analysis result found');
          }
          
          // 創建發佈說明
          const releaseNotes = `# 🧮 Calculator Release \`${{ github.ref_name }}-${{ github.run_number }}\`
          
          ## 📋 Changes Summary
          - **Files Changed**: ${{ steps.changes.outputs.changed-files }}
          - **Lines Added**: +${{ steps.changes.outputs.insertions }}
          - **Lines Removed**: -${{ steps.changes.outputs.deletions }}
          - **Author**: ${{ github.actor }}
          - **Date**: ${new Date().toISOString().split('T')[0]}
          
          ## 🤖 AI Analysis
          ${analysisResult.summary || 'Analysis not available'}
          
          ## 🔗 Links
          - **Commit**: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          - **Repository**: [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})
          
          ---
          *🤖 Auto-generated by MCP Calculator Pipeline*`;
          
          console.log('📝 Release notes generated');
          fs.writeFileSync('RELEASE_NOTES.md', releaseNotes);

    - name: 🤖 真正的 MCP 服務整合
      id: mcp-integration
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "🤖 準備調用真正的 MCP 服務..."
        
        # 安裝依賴
        cd devops-mcp/notion-mcp && npm install && cd ../..
        cd devops-mcp/slack-mcp && npm install && cd ../..
        
        # 確保腳本可執行
        chmod +x scripts/call-mcp-services.js
        
        # 調用真正的 MCP 服務
        echo "🚀 啟動 MCP 協議整合..."
        node scripts/call-mcp-services.js \
          "${{ github.repository }}" \
          "${{ github.actor }}" \
          "${{ github.run_number }}" \
          "${{ steps.changes.outputs.changed-files }}" \
          "${{ steps.changes.outputs.insertions }}" \
          "${{ steps.changes.outputs.deletions }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}

    - name: 📋 PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## 🧮 Calculator Analysis Report
          
          ### 📊 Change Statistics
          - **Files**: ${{ steps.changes.outputs.changed-files }} changed
          - **Lines**: +${{ steps.changes.outputs.insertions }}/-${{ steps.changes.outputs.deletions }}
          - **Analysis**: ${{ steps.mcp-analysis.outputs.analysis-success == 'true' && '✅ Completed' || '⚠️ Unavailable' }}
          
          ### 🤖 AI Insights
          ${{ steps.mcp-analysis.outputs.analysis-summary || 'Analysis service not available in this environment' }}
          
          ---
          *🤖 Auto-generated by MCP Calculator Pipeline*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: 🎯 Summary
      if: always()
      run: |
        echo "## 🧮 MCP Calculator Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Repository | ${{ github.repository }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Event | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Files Changed | ${{ steps.changes.outputs.changed-files }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lines Added | +${{ steps.changes.outputs.insertions }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lines Removed | -${{ steps.changes.outputs.deletions }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Modern MCP Calculator Pipeline completed!**" >> $GITHUB_STEP_SUMMARY